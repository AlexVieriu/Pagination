@page "/"

@inject HttpClient httpclient


@if (Angajati == null)
{
    <p>Loaging...</p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <th>Cod Angajat</th>
                <th>Full Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var angajat in Angajati)
            {
                <tr>
                    <td>@angajat.CodAngajat</td>
                    <td>@angajat.FullName</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        @if (curPage > 1)
        {
            <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("prev"))">Prev</button>
        }

        @for (var i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn page-item @(currentPage==curPage?"btn-danger":"")"
            @onclick="@(async()=> await RefreshRecord(currentPage))">

                @currentPage
            </button>
        }

        @if (curPage <= totalPages - 2)
        {
            <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("next"))">Next</button>
        }
    </div>
}

@code {
    public List<Angajat>? Angajati;
    public Pagination<Angajat>? AngajatiPaging;

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize = 10;  // number of pages display that you can click on
    int pageSize = 20;  // number of pages
    int startPage;
    int endPage;

    protected override async Task OnInitializedAsync()
    {
        curPage = 1;

        AngajatiPaging = await httpclient.GetFromJsonAsync<Pagination<Angajat>>
                            ($"/api/Pagination?currentPageNumber={curPage}&pageSize={pageSize}");

        Angajati = AngajatiPaging.Data;
        totalRecords = AngajatiPaging.TotalCount;
        totalPages = AngajatiPaging.TotalPages;

        SetPagerSize("forward");
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                    SetPagerSize("forward");
                curPage += 1;
                await RefreshRecord(curPage);
            }
            return;
        }

        else if (direction == "prev")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                    SetPagerSize("back");
                curPage -= 1;
                await RefreshRecord(curPage);
            }
            return;
        }
    }

    public async Task RefreshRecord(int currentPage)
    {

        AngajatiPaging = await httpclient.GetFromJsonAsync<Pagination<Angajat>>
                            ($"/api/Pagination?currentPageNumber={currentPage}&pageSize={pageSize}");

        Angajati = AngajatiPaging.Data;
        totalRecords = AngajatiPaging.TotalCount;
        totalPages = AngajatiPaging.TotalPages;
        curPage = AngajatiPaging.CurrentPageNumber;

        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
                endPage = startPage + pagerSize - 1;
            else
                endPage = totalPages;
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pageSize;
            this.StateHasChanged();
        }
    }
}