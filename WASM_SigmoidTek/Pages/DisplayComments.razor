@page "/display-comments"

@inject HttpClient Http

<h2 class="bg-success text-white">Comments-Pagination Test</h2>

@if (comments == null)
{
    <p>Loading...</p>
}

else
{
    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Body</th>
            </tr>
        </thead>

        <tbody>
            @foreach (Comment comment in comments)
            {
                <tr>
                    <td>@comment.Id</td>
                    <td>@comment.Name</td>
                    <td>@comment.Email</td>
                    <td>@comment.Body</td>
                </tr>
            }
        </tbody>

        <tfoot>
            <Pagination TotalPages="@(totalPages != 0? totalPages :1)"
                    PageIndex="@PageIndex"
                    Radius="5"
                    OnSelectedPage="@SelectPage">
            </Pagination>
        </tfoot>
    </table>
}



@code {
    private int PageIndex;

    private IEnumerable<Comment>? allComments = null;
    private IEnumerable<Comment>? comments = null;

    private int itemsPerPage = 15;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        PageIndex = 1;

        allComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>("https://jsonplaceholder.typicode.com/comments");
        if (allComments != null)
        {
            //Initialize the number of "totalPages"
            totalPages = (int)(allComments.Count() / itemsPerPage);

            //Initialize the "comments" wich will be displayed when the page loaded first time.
            var skinCount = itemsPerPage * (PageIndex - 1);
            comments = allComments.Skip(skinCount).Take(itemsPerPage);
        }
    }

    private void SelectPage(int selectedPageIndex)
    {
        if (allComments != null)
        {
            PageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (PageIndex - 1);
            comments = allComments.Skip(skipCount).Take(itemsPerPage);
        }
    }
}