@typeparam TClass

@inject HttpClient httpClient

@if (CurrentPage != 0)
{
    <div class="d-flex justify-content-between">
        <div class="pagination">

            <button class="btn page-link" @onclick="@(async ()=> await NavigateToPage("home"))">Home</button>
            <button class="btn page-link" @onclick="@(async ()=> await NavigateToPage("prev"))">Prev</button>

            @for (var i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn page-link"
                @onclick="@(async()=> await RefreshRecord(currentPage))">

                    @currentPage
                </button>
            }

            <button class="btn page-link" @onclick="@(async ()=> await NavigateToPage("next"))">Next</button>
            <button class="btn page-link" @onclick="@(async ()=> await NavigateToPage("end"))">End</button>

        </div>
        <div>
            <select class="form-control" @onchange="SelectPageSize">
                @foreach (var pagesize in pageSizeOption)
                {
                    <option value=@pagesize>@pagesize</option>
                }
            </select>
        </div>
    </div>
}


@code {
    private int startPage = 0;
    private int endPage = 0;
    private int[] pageSizeOption = new int[] { 10, 15, 20, 50 };


    [Parameter]
    public Pagination<TClass>? Products { get; set; }
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public int TotalRecords { get; set; }
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    [Parameter]
    public int PagerSize { get; set; } = 10;
    [Parameter]
    public EventCallback<int> OnSelectPage { get; set; }
    [Parameter]
    public EventCallback<int> OnSelectPageSize { get; set; }

    protected override void OnInitialized()
    {
        SetPagerSize("forward");
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (CurrentPage < TotalPages)
            {
                if (CurrentPage == endPage)
                    SetPagerSize("forward");
                CurrentPage += 1;
                await RefreshRecord(CurrentPage);
            }
            return;
        }

        else if (direction == "prev")
        {
            if (CurrentPage > 1)
            {
                if (CurrentPage == startPage)
                    SetPagerSize("back");
                CurrentPage -= 1;
                await RefreshRecord(CurrentPage);
            }
            return;
        }

        else if (direction == "home")
        {
            startPage = 1;
            endPage = startPage + PagerSize;
        }

        else if (direction == "end")
        {
            endPage = TotalPages;
            startPage = endPage - PagerSize;
        }

    }

    public async Task RefreshRecord(int currentPage)
    {
        await OnSelectPage.InvokeAsync(currentPage);
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < TotalPages)
        {
            startPage = endPage + 1;
            if (endPage + PagerSize < TotalPages)
                endPage = startPage + PagerSize - 1;
            else
                endPage = TotalPages;
            StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - PagerSize;
            StateHasChanged();
        }
    }

    public async Task SelectPageSize(ChangeEventArgs e)
    {
        PageSize = Convert.ToInt32(e.Value.ToString());
        await OnSelectPageSize.InvokeAsync(PageSize);
    }
}