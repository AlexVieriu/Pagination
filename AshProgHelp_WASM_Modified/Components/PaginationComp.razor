@typeparam TClass

@inject HttpClient httpClient

@if (CurrentPage != 0)
{
    <div class="pagination">
        @if (CurrentPage > 1)
        {
            <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("prev"))">Prev</button>
        }

        @for (var i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn page-item @(currentPage==CurrentPage?"btn-danger":"")"
            @onclick="@(async()=> await RefreshRecord(currentPage))">

                @currentPage
            </button>
        }

        @if (CurrentPage <= TotalPages - 2)
        {
            <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("next"))">Next</button>
        }
    </div>
}


@code {
    private int startPage = 0;
    private int endPage = 0;

    [Parameter]
    public Pagination<TClass>? Products { get; set; }
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public int TotalRecords { get; set; }
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    [Parameter]
    public int PagerSize { get; set; } = 10;
    [Parameter]
    public EventCallback<int> OnSelectPage { get; set; }

    protected override void OnInitialized()
    {
        SetPagerSize("forward");
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (CurrentPage < TotalPages)
            {
                if (CurrentPage == endPage)
                    SetPagerSize("forward");
                CurrentPage += 1;
                await RefreshRecord(CurrentPage);
            }
            return;
        }

        else if (direction == "prev")
        {
            if (CurrentPage > 1)
            {
                if (CurrentPage == startPage)
                    SetPagerSize("back");
                CurrentPage -= 1;
                await RefreshRecord(CurrentPage);
            }
            return;
        }
    }

    public async Task RefreshRecord(int currentPage)
    {
        await OnSelectPage.InvokeAsync(currentPage);
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < TotalPages)
        {
            startPage = endPage + 1;
            if (endPage + PagerSize < TotalPages)
                endPage = startPage + PagerSize - 1;
            else
                endPage = TotalPages;
            StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - PagerSize;
            StateHasChanged();
        }
    }
}