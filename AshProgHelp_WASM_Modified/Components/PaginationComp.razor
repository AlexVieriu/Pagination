@*<div class="pagination">
    @if (curPage > 1)
    {
        <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("prev"))">Prev</button>
    }

    @for (var i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn page-item @(currentPage==curPage?"btn-danger":"")"
            @onclick="@(async()=> await RefreshRecord(currentPage))">

            @currentPage
        </button>
    }

    @if (curPage <= totalPages - 2)
    {
        <button class="btn page-item" @onclick="@(async ()=> await NavigateToPage("next"))">Next</button>
    }
</div>
*@

@code{   
    [Parameter]
    public T Product { get; set; }
    [Parameter] 
    public int TotalPages { get; set; }
    [Parameter]
    public int TotalRecords { get; set; }
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    [Parameter]
    public int NrPagesDisplayed { get; set; }
    [Parameter]
    public EventCallback<int> OnSelectPage { get; set; }


    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                    SetPagerSize("forward");
                curPage += 1;
                await RefreshRecord(curPage);
            }
            return;
        }

        else if (direction == "prev")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                    SetPagerSize("back");
                curPage -= 1;
                await RefreshRecord(curPage);
            }
            return;
        }
    }

    public async Task RefreshRecord(int currentPage)
    {        
        Product = await httpclient.GetFromJsonAsync<Pagination<Angajat>>
                            ($"/api/Pagination?currentPageNumber={currentPage}&pageSize={pageSize}");

        Angajati = Product.Data;
        totalRecords = Product.TotalCount;
        totalPages = Product.TotalPages;
        curPage = Product.CurrentPageNumber;

        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
                endPage = startPage + pagerSize - 1;
            else
                endPage = totalPages;
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pageSize;
            this.StateHasChanged();
        }
    }

}